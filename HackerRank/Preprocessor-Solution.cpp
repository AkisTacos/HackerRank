// HackerRank - Easy
// Preprocessor Solution
// April 24, 2019
// Language: C++
// 
/* Description:
    
  Preprocessor directives are lines included in the code preceded by a hash 
  sign (#). These lines are directives for the preprocessor. 
  The preprocessor examines the code before actual compilation of code begins 
  and resolves all these directives before any code is actually generated by 
  regular statements.

	#define INF 10000000
		if( val == INF) {
			//Do something
		}
	
	After the preprocessor has replaced the directives, the code will be
		if( val == 10000000) { 
			//Here INF is replaced by the value with which it's defined.
			//Do something
		}
	
	You can also define function macros which have parameters.
	#define add(a, b) a + b
	int x = add(a, b);

	The second statement after the preprocessor has replaced the directives 
	will be:

		int x = a + b;
		To know more about preprocessor directives, you can go to this link
		You're spending your afternoon at a local school, teaching kids how 
		to code. You give them a simple task: find the difference between the 
		maximum and minimum values in an array of integers.

		After a few hours, they came up with some promising source code. 
		Unfortunately, it doesn't compile! Since you don't want to discourage 
		them, you decide to make their code work without modifying it by 
		adding preprocessor macros.

		Review the locked stub code in your editor and add the preprocessor 
		macros necessary to make the code work.  

*/

// ------- Preprocessor toStr: ---------
// Takes a variable through the parameter and return a string version of it
#define toStr(variable) #variable 
// # here will double quote anything following it so whatever variable is it'll be double quoted
// ------- End toStr ------- 

// ------- Preprocessor io and foreach ------- 
// This will be our "cin >> variable"
#define io(input) cin >> input
// Now io(v)[i] will be cin >> v[i]
#define foreach(vect, i) for (int i = 0; i < vect.size(); i++)
// ------- End io and foreach ------- 

// ------- Preprocessor FUNCTION: ------- 
// Take a function name which is either maximum or minimum and it's operator which is > or < and return a if a > b or b if a < b
#define FUNCTION(funcName, inputOperator) inline void name(int &currentMaxOrMin, int candidateMaxOrMin){!(currentMaxOrMin inputOperator candidateMaxOrMin) ? currentMaxOrMin = candidateMaxOrMin : false;}
// ------- End FUNCTION ------- 

// ------- Preprocessor INF: -------
#define INF (unsigned)! ((int)0) // 0 is casted as Int, 
// then negated from 0 to 1, then unsigned removes the last bit 
// that represents +/- so now we have the biggest positive number
// ------- End INF ------- 


#include <iostream>
#include <vector>
using namespace std;

// The preprocessors to be defined: toStr, io, FUNCTION, INF
#if !defined toStr || !defined io || !defined FUNCTION || !defined INF
#error Missing preprocessor definitions
#endif 


FUNCTION(minimum, <)
FUNCTION(maximum, >)

int main(){
	int n; cin >> n;
	vector<int> v(n);
	foreach(v, i) {
		io(v)[i];
	}
	int mn = INF;
	int mx = -INF;
	foreach(v, i) {
		minimum(mn, v[i]);
		maximum(mx, v[i]);
	}
	int ans = mx - mn;
	cout << toStr(Result =) <<' '<< ans;
	return 0;

}